generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  key         String           @unique
  name        String
  description String?
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Tag {
  id        String     @id @default(cuid())
  slug      String     @unique
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  titles    TitleTag[]

  @@map("tags")
}

model TitleTag {
  id      String @id @default(cuid())
  titleId String
  tagId   String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  title   titles @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([titleId, tagId])
  @@map("title_tags")
}

model PricingPlan {
  id            String         @id @default(cuid())
  type          String
  priceCents    Int
  currency      String         @default("USD")
  benefitsJson  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  purchases     Purchase[]
  subscriptions Subscription[]

  @@map("pricing_plans")
}

model Purchase {
  id          String       @id @default(cuid())
  userId      String
  titleId     String
  episodeId   String?
  planId      String?
  amountCents Int
  currency    String       @default("USD")
  provider    String
  status      String       @default("PENDING")
  extRef      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  episode     episodes?    @relation(fields: [episodeId], references: [id])
  plan        PricingPlan? @relation(fields: [planId], references: [id])
  title       titles       @relation(fields: [titleId], references: [id])
  user        users        @relation(fields: [userId], references: [id])

  @@map("purchases")
}

model Subscription {
  id               String      @id @default(cuid())
  userId           String
  planId           String
  status           String      @default("ACTIVE")
  currentPeriodEnd DateTime
  extRef           String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  plan             PricingPlan @relation(fields: [planId], references: [id])
  user             users       @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Promotion {
  id         String   @id @default(cuid())
  code       String   @unique
  type       String
  value      Int
  startsAt   DateTime
  endsAt     DateTime
  usageLimit Int?
  usedCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("promotions")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?
  actorAdminId String?
  action      String
  entity      String
  entityId    String
  beforeJson  String?
  afterJson   String?
  ip          String?
  createdAt   DateTime @default(now())
  actor       users?   @relation(fields: [actorUserId], references: [id])
  actorAdmin  admins?  @relation("AdminAuditLogs", fields: [actorAdminId], references: [id])

  @@map("audit_logs")
}

model FlagReport {
  id        String    @id @default(cuid())
  userId    String
  titleId   String?
  episodeId String?
  reason    String
  status    String    @default("PENDING")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  episode   episodes? @relation(fields: [episodeId], references: [id])
  title     titles?   @relation(fields: [titleId], references: [id])
  user      users     @relation(fields: [userId], references: [id])

  @@map("flag_reports")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  valueJson String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Locale {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  createdAt    DateTime      @default(now())
  translations Translation[]

  @@map("locales")
}

model Translation {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  field     String
  localeId  String
  value     String
  status    String   @default("DRAFT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  titleId   String?
  locale    Locale   @relation(fields: [localeId], references: [id])
  title     titles?  @relation(fields: [titleId], references: [id])

  @@unique([entity, entityId, field, localeId])
  @@map("translations")
}

model Collection {
  id             String           @id @default(cuid())
  name           String
  slug           String           @unique
  type           String
  ruleJson       String?
  itemsOrderJson String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  items          CollectionItem[]

  @@map("collections")
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String
  titleId      String
  order        Int        @default(0)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  title        titles     @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([collectionId, titleId])
  @@map("collection_items")
}

model categories {
  id        String   @id
  slug      String   @unique
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  titles    titles[]
}

model episodes {
  id            String       @id
  titleId       String
  epNumber      Int
  name          String
  durationSec   Int?
  videoId       String?
  isFreePreview Boolean      @default(false)
  lockType      String       @default("PAID_PER_EPISODE")
  priceCents    Int?
  status        String       @default("DRAFT")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  titles        titles       @relation(fields: [titleId], references: [id], onDelete: Cascade)
  flagReports   FlagReport[]
  purchases     Purchase[]

  @@unique([titleId, epNumber])
}

model titles {
  id                              String           @id
  slug                            String           @unique
  name                            String
  mainTitle                       String?
  subTitle                        String?
  synopsis                        String?
  coverImageId                    String?
  coverUrl                        String?
  bannerUrl                       String?
  isOnline                        Boolean          @default(false)
  freeUntilEpisode                Int?
  bundlePrice                     Int?
  bundlePriceCurrency             String           @default("CNY")
  bundlePriceCoins                Int?
  status                          String           @default("DRAFT")
  language                        String           @default("en")
  createdById                     String
  updatedById                     String
  createdAt                       DateTime         @default(now())
  updatedAt                       DateTime
  releaseAt                       DateTime?
  rating                          Float?
  featuredWeight                  Int              @default(0)
  categoryId                      String?
  collections                     CollectionItem[]
  episodes                        episodes[]
  flagReports                     FlagReport[]
  purchases                       Purchase[]
  tags                            TitleTag[]
  categories                      categories?      @relation(fields: [categoryId], references: [id])
  users_titles_createdByIdTousers users            @relation("titles_createdByIdTousers", fields: [createdById], references: [id])
  users_titles_updatedByIdTousers users            @relation("titles_updatedByIdTousers", fields: [updatedById], references: [id])
  translations                    Translation[]
  sectionContent                  sectionContent[]
}

// 前台用户表（看剧用户）
model users {
  id                               String         @id
  email                            String         @unique
  name                             String?
  avatar                           String?
  provider                         String         @default("email")
  status                           String         @default("ACTIVE")
  createdAt                        DateTime       @default(now())
  updatedAt                        DateTime
  auditLogs                        AuditLog[]
  flagReports                      FlagReport[]
  purchases                        Purchase[]
  subscriptions                    Subscription[]
  titles_titles_createdByIdTousers titles[]       @relation("titles_createdByIdTousers")
  titles_titles_updatedByIdTousers titles[]       @relation("titles_updatedByIdTousers")
  roles                            UserRole[]
  userCoin                         userCoin?
}

// 后台管理员表
model admins {
  id           String              @id
  email        String              @unique
  name         String?
  avatar       String?
  password     String?
  role         String              @default("ADMIN")
  status       String              @default("ACTIVE")
  lastLogin    DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  permissions  AdminPermission[]
  auditLogs    AuditLog[]         @relation("AdminAuditLogs")

  @@map("admins")
}

// 管理员权限表
model AdminPermission {
  id            String   @id @default(cuid())
  adminId       String
  permissionKey String
  createdAt     DateTime @default(now())
  admin         admins   @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, permissionKey])
  @@map("admin_permissions")
}

model sectionContent {
  id        String   @id @default(cuid())
  section   String
  titleId   String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  titles    titles   @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([section, titleId])
  @@map("section_content")
}

model paymentPackage {
  id          String   @id @default(cuid())
  name        String
  priceUsd    Int
  baseCoins   Int
  bonusCoins  Int      @default(0)
  isFirstTime Boolean  @default(false)
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("payment_packages")
}

model userCoin {
  id        String   @id @default(cuid())
  userId    String   @unique
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_coins")
}
