generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now()) @map("createdAt")
  updatedAt   DateTime         @updatedAt @map("updatedAt")
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  key         String           @unique
  name        String
  description String?
  createdAt   DateTime         @default(now()) @map("createdAt")
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String @map("userId")
  roleId String @map("roleId")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String     @map("roleId")
  permissionId String     @map("permissionId")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Tag {
  id        String     @id @default(cuid())
  slug      String     @unique
  name      String
  createdAt DateTime   @default(now()) @map("createdAt")
  updatedAt DateTime   @updatedAt @map("updatedAt")
  titles    TitleTag[]

  @@map("tags")
}

model TitleTag {
  id      String @id @default(cuid())
  titleId String @map("titleId")
  tagId   String @map("tagId")
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  title   titles @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([titleId, tagId])
  @@map("title_tags")
}

model PricingPlan {
  id            String         @id @default(cuid())
  type          String
  priceCents    Int            @map("priceCents")
  currency      String         @default("USD")
  benefitsJson  String?        @map("benefitsJson")
  createdAt     DateTime       @default(now()) @map("createdAt")
  updatedAt     DateTime       @updatedAt @map("updatedAt")
  purchases     Purchase[]
  subscriptions Subscription[]

  @@map("pricing_plans")
}

model Purchase {
  id          String       @id @default(cuid())
  userId      String       @map("userId")
  titleId     String       @map("titleId")
  episodeId   String?      @map("episodeId")
  planId      String?      @map("planId")
  amountCents Int          @map("amountCents")
  currency    String       @default("USD")
  provider    String
  status      String       @default("PENDING")
  extRef      String?      @map("extRef")
  createdAt   DateTime     @default(now()) @map("createdAt")
  updatedAt   DateTime     @updatedAt @map("updatedAt")
  episode     episodes?    @relation(fields: [episodeId], references: [id])
  plan        PricingPlan? @relation(fields: [planId], references: [id])
  title       titles       @relation(fields: [titleId], references: [id])
  user        users        @relation(fields: [userId], references: [id])

  @@map("purchases")
}

model Subscription {
  id               String      @id @default(cuid())
  userId           String      @map("userId")
  planId           String      @map("planId")
  status           String      @default("ACTIVE")
  currentPeriodEnd DateTime    @map("currentPeriodEnd")
  extRef           String?     @map("extRef")
  createdAt        DateTime    @default(now()) @map("createdAt")
  updatedAt        DateTime    @updatedAt @map("updatedAt")
  plan             PricingPlan @relation(fields: [planId], references: [id])
  user             users       @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Promotion {
  id         String   @id @default(cuid())
  code       String   @unique
  type       String
  value      Int
  startsAt   DateTime @map("startsAt")
  endsAt     DateTime @map("endsAt")
  usageLimit Int?     @map("usageLimit")
  usedCount  Int      @default(0) @map("usedCount")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")

  @@map("promotions")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String   @map("actorUserId")
  action      String
  entity      String
  entityId    String   @map("entityId")
  beforeJson  String?  @map("beforeJson")
  afterJson   String?  @map("afterJson")
  ip          String?
  createdAt   DateTime @default(now()) @map("createdAt")
  actor       users    @relation(fields: [actorUserId], references: [id])

  @@map("audit_logs")
}

model FlagReport {
  id        String    @id @default(cuid())
  userId    String    @map("userId")
  titleId   String?   @map("titleId")
  episodeId String?   @map("episodeId")
  reason    String
  status    String    @default("PENDING")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")
  episode   episodes? @relation(fields: [episodeId], references: [id])
  title     titles?   @relation(fields: [titleId], references: [id])
  user      users     @relation(fields: [userId], references: [id])

  @@map("flag_reports")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  valueJson String   @map("valueJson")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("settings")
}

model Locale {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  createdAt    DateTime      @default(now()) @map("createdAt")
  translations Translation[]

  @@map("locales")
}

model Translation {
  id        String   @id @default(cuid())
  entity    String
  entityId  String   @map("entityId")
  field     String
  localeId  String   @map("localeId")
  value     String
  status    String   @default("DRAFT")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  titleId   String?  @map("titleId")
  locale    Locale   @relation(fields: [localeId], references: [id])
  title     titles?  @relation(fields: [titleId], references: [id])

  @@unique([entity, entityId, field, localeId])
  @@map("translations")
}

model Collection {
  id             String           @id @default(cuid())
  name           String
  slug           String           @unique
  type           String
  ruleJson       String?          @map("ruleJson")
  itemsOrderJson String?          @map("itemsOrderJson")
  createdAt      DateTime         @default(now()) @map("createdAt")
  updatedAt      DateTime         @updatedAt @map("updatedAt")
  items          CollectionItem[]

  @@map("collections")
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String     @map("collectionId")
  titleId      String     @map("titleId")
  order        Int        @default(0)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  title        titles     @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([collectionId, titleId])
  @@map("collection_items")
}

model categories {
  id        String   @id
  slug      String   @unique
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @map("updatedAt")
  titles    titles[]
}

model episodes {
  id            String       @id
  titleId       String       @map("titleId")
  epNumber      Int          @map("epNumber")
  name          String
  durationSec   Int?         @map("durationSec")
  videoId       String?      @map("videoId")
  isFreePreview Boolean      @default(false) @map("isFreePreview")
  lockType      String       @default("PAID_PER_EPISODE") @map("lockType")
  priceCents    Int?         @map("priceCents")
  status        String       @default("DRAFT")
  createdAt     DateTime     @default(now()) @map("createdAt")
  updatedAt     DateTime     @map("updatedAt")
  titles        titles       @relation(fields: [titleId], references: [id], onDelete: Cascade)
  flagReports   FlagReport[]
  purchases     Purchase[]

  @@unique([titleId, epNumber])
}

model titles {
  id                              String           @id
  slug                            String           @unique
  name                            String
  synopsis                        String?
  coverImageId                    String?          @map("coverImageId")
  status                          String           @default("DRAFT")
  language                        String           @default("en")
  createdById                     String           @map("createdById")
  updatedById                     String           @map("updatedById")
  createdAt                       DateTime         @default(now()) @map("createdAt")
  updatedAt                       DateTime         @map("updatedAt")
  releaseAt                       DateTime?        @map("releaseAt")
  rating                          Float?
  featuredWeight                  Int              @default(0) @map("featuredWeight")
  categoryId                      String?          @map("categoryId")
  bannerUrl                       String?          @map("bannerurl")
  collections                     CollectionItem[]
  episodes                        episodes[]
  flagReports                     FlagReport[]
  purchases                       Purchase[]
  tags                            TitleTag[]
  categories                      categories?      @relation(fields: [categoryId], references: [id])
  users_titles_createdByIdTousers users            @relation("titles_createdByIdTousers", fields: [createdById], references: [id])
  users_titles_updatedByIdTousers users            @relation("titles_updatedByIdTousers", fields: [updatedById], references: [id])
  translations                    Translation[]
}

model users {
  id                               String         @id
  email                            String         @unique
  name                             String?
  avatar                           String?
  provider                         String         @default("email")
  status                           String         @default("ACTIVE")
  createdAt                        DateTime       @default(now()) @map("createdAt")
  updatedAt                        DateTime       @map("updatedAt")
  password                         String?
  auditLogs                        AuditLog[]
  flagReports                      FlagReport[]
  purchases                        Purchase[]
  subscriptions                    Subscription[]
  titles_titles_createdByIdTousers titles[]       @relation("titles_createdByIdTousers")
  titles_titles_updatedByIdTousers titles[]       @relation("titles_updatedByIdTousers")
  roles                            UserRole[]
}

model admins {
  id          String            @id
  email       String            @unique
  name        String?
  avatar      String?
  password    String?
  role        String            @default("ADMIN")
  status      String            @default("ACTIVE")
  lastLogin   DateTime?         @map("last_login") @db.Timestamp(6)
  createdAt   DateTime?         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  permissions AdminPermission[]

  @@map("admins")
}

model AdminPermission {
  id            String    @id @default(cuid())
  adminId       String    @map("admin_id")
  permissionKey String    @map("permission_key")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  admin         admins    @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([adminId, permissionKey])
  @@map("admin_permissions")
}

model SectionContent {
  id          String   @id @default(uuid())
  sectionType String   @map("section_type")
  contentId   String   @map("content_id")
  contentType String   @default("movie") @map("content_type")
  title       String?
  subtitle    String?
  imageUrl    String?  @map("image_url")
  jumpUrl     String?  @map("jump_url")
  orderIndex  Int      @default(0) @map("order_index")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("section_content")
}
